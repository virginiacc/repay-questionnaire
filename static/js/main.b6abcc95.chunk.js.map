{"version":3,"sources":["Questionnaire/QuestionnaireContentBlock.js","FormElements/Radio.js","FormElements/RadioGroup.js","FormElements/Checkbox.js","FormElements/CheckboxGroup.js","utils.js","Questionnaire/QuestionnaireQuestion.js","Questionnaire/QuestionnaireQuestionList.js","Questionnaire/QuestionnaireSubmitButton.js","App.js","index.js"],"names":["QuestionnaireContentBlock","contentBlock","dangerouslySetInnerHTML","__html","text","Radio","props","className","containerClass","type","value","id","name","checked","disabled","onChange","e","htmlFor","label","RadioGroup","questionID","selection","answers","console","log","map","answer","index","Checkbox","target","CheckboxGroup","selected","handleChange","val","isChecked","copy","includes","push","filter","item","conditionMet","condition","selections","show","question","undefined","Array","isArray","checkConditionGroup","group","comparison_type","conditions","every","forEach","some","displayConditionsMet","obj","condition_block","length","conditionsPassed","groups","condition_groups","results","result","checkConditions","getDisplayable","arr","QuestionnaireQuestion","content","contentBlocks","content_blocks","FormComponent","QuestionnaireQuestionList","questions","QuestionnaireSubmitButton","href","isFinished","onClick","preventDefault","title","initial_json","require","App","useState","setResults","setQuestions","setSelections","activeQuestions","setActiveQuestions","setFinished","setup","questionsArray","selectionsObj","displayable","finished","q","checkFinished","useEffect","selectionsCopy","Object","assign","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"g1cAMeA,EANmB,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,aACpC,OACC,qBAAKC,wBAAyB,CAACC,OAAQF,EAAaG,SCqBxCC,EAvBD,SAAEC,GAIZ,OACE,sBAAKC,UAAS,2FACMD,EAAME,eAAiBF,EAAME,eAAiB,IADlE,UAEE,uBAAOD,UAAU,UACVE,KAAK,QACLC,MAAQJ,EAAMI,MACdC,GAAKL,EAAMK,GACXC,KAAON,EAAMM,KACbC,QAAUP,EAAMO,QAChBC,SAAWR,EAAMQ,SACjBC,SAbM,SAAAC,GACfV,EAAMS,SAAUT,EAAMI,UAapB,uBAAOH,UAAU,UACVU,QAAUX,EAAMK,GADvB,SAEE,sBAAMT,wBAAyB,CAACC,OAAQG,EAAMY,eCCzCC,EAhBI,SAAC,GAAoD,IAAjDC,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,QAASP,EAAgB,EAAhBA,SAErD,OADAQ,QAAQC,IAAI,cAAeH,GAEzB,0BAAUd,UAAU,kBAApB,SACIe,EAAQG,KAAK,SAAEC,EAAQC,GAAV,OACb,cAAC,EAAD,CAAOT,MAAQQ,EAAOtB,KACfM,MAAQgB,EAAOf,GACfE,QAAUQ,IAAcK,EAAOf,GAC/BA,GAAE,YAAOS,EAAP,cAAuBM,EAAOf,IAChCI,SAAWA,GACLW,EAAOf,U,QCYbiB,EAxBE,SAAEtB,GAKf,OACE,sBAAKC,UAAS,8FACMD,EAAME,eAAiBF,EAAME,eAAiB,IADlE,UAEE,uBAAOD,UAAU,aACVE,KAAK,WACLC,MAAQJ,EAAMI,MACdC,GAAKL,EAAMK,GACXC,KAAON,EAAMM,KACbC,QAAUP,EAAMO,QAChBC,SAAWR,EAAMQ,SACjBC,SAdM,SAAAC,GACfV,EAAMS,SAAUT,EAAMI,MAAOM,EAAEa,OAAOhB,YAcpC,uBAAON,UAAU,UACVU,QAAUX,EAAMK,GADvB,SAEE,sBAAMT,wBAAyB,CAACC,OAAQG,EAAMY,eCUzCY,EA1BO,SAAC,GAAoD,IAAjDV,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,QAASP,EAAgB,EAAhBA,SAClDgB,EAAWV,GAAa,GACxBW,EAAe,SAAEC,EAAKC,GAC1B,IAAIC,EAAI,YAAOJ,GACVG,GACFC,EAAKC,SAAUH,IAASE,EAAKE,KAAMJ,GAEpCE,EAAOA,EAAKG,QAAQ,SAAAC,GAAI,OAAIA,IAASN,KAEvClB,EAAUoB,IAGZ,OACE,0BAAU5B,UAAU,kBAApB,SACIe,EAAQG,KAAK,SAAEC,EAAQC,GAAV,OACb,cAAC,EAAD,CAAUT,MAAQQ,EAAOtB,KACfM,MAAQgB,EAAOf,GACfE,QAAUkB,EAASK,SAAUV,EAAOf,IACpCA,GAAE,YAAOS,EAAP,cAAuBM,EAAOf,IAChCI,SAAWiB,GACLN,EAAOf,UCpBlB6B,G,KAAe,SAAEC,EAAWC,EAAYC,GACnD,IAAItB,EAAYqB,EAAWD,EAAUG,UACjCnC,EAAOgC,EAAUhC,KACjBiB,EAASe,EAAUf,OACvB,MAAc,WAATjB,OACkBoC,IAAdxB,EACsB,WAAnBoB,EAAUhC,KACbqC,MAAMC,QAAS1B,GACfA,EAAUe,SAAUV,GACpBL,IAAcK,EACQ,eAAnBe,EAAUhC,KACbqC,MAAMC,QAAS1B,IACdA,EAAUe,SAAUV,GACrBL,IAAcK,OAHhB,IAOIsB,EAAsB,SAAEC,EAAOP,EAAYC,GACtD,IAAIO,EAAkBD,EAAMxC,KACxB0C,EAAaF,EAAME,WACvB,MAAyB,QAApBD,EACIC,EAAWC,OAChB,SAAAX,GAAS,OAA8C,IAA1CD,EAAcC,EAAWC,MAEV,QAApBQ,GACVC,EAAWE,SACT,SAAAZ,GAAS,OAAIlB,QAAQC,IAAIgB,EAAcC,EAAWC,OAE7CS,EAAWG,MAChB,SAAAb,GAAS,OAA8C,IAA1CD,EAAcC,EAAWC,YALnC,GAgCIa,EAAuB,SAAEC,EAAKd,GACzC,IAAIe,EAAkBD,EAAIC,iBAAmB,GAC7C,QAAMA,GACAA,EAAgBN,YAChBM,EAAgBN,WAAWO,SA1BJ,SAAED,EAAiBf,GAChD,IAAMiB,EAAmBX,EACxBS,EAAiBf,GAEdkB,EAASH,EAAgBI,iBAC7B,GAAKD,GAAUA,EAAOF,OAAS,EAAI,CACjC,IAAII,EAAU,GAIf,OAHCF,EAAOP,SAAS,SAAAJ,GACda,EAAQzB,KAAKW,EAAqBC,EAAOP,OAEZ,QAAzBe,EAAgBhD,KACtBqD,EAAQR,MAAM,SAAAS,GAAM,OAAe,IAAXA,KACvBD,EAAQV,OAAO,SAAAW,GAAM,OAAe,IAAXA,KAE3B,OAAOJ,EAeDK,CAAiBP,EAAiBf,IAG9BuB,EAAiB,SAAEC,EAAKxB,GACnC,OAAOwB,EAAI5B,QACT,SAAEC,GACA,OAAOgB,EAAsBhB,EAAMG,OC1C1ByB,EAxBe,SAAC,GAEvB,IADNvB,EACK,EADLA,SAAUF,EACL,EADKA,WAAqBV,GAC1B,EADiBoC,QACjB,EAD0BpC,cAEzBV,EAAU2C,EAAgBrB,EAAStB,QAASoB,GAC5C2B,EAAgBJ,EAAgBrB,EAAS0B,eAAgB5B,GACzD/B,EAAKiC,EAASjC,GACd4D,EAAkC,UAAlB3B,EAASnC,KACTU,EACAW,EAEtB,OADAP,QAAQC,IAAI,yBAA0Bb,EAAI+B,EAAYA,EAAW/B,IAE/D,sBAAKJ,UAAU,sBAAf,UACI8D,EAAcX,OAAS,GAAKW,EAAc5C,KAAK,SAAEc,EAAMZ,GAAR,OAC/C,cAAC,EAAD,CAC2B1B,aAAesC,GADTA,EAAK5B,OAGxC,cAAC4D,EAAD,CAAenD,WAAaT,EACbU,UAAYqB,EAAW/B,GACvBW,QAAUA,EACVP,SAAW,SAAEkB,GAAF,OAAWD,EAAcrB,EAAIsB,UCL9CuC,EAjBmB,SAAC,GAE7B,IADFC,EACC,EADDA,UAAW/B,EACV,EADUA,WAAY0B,EACtB,EADsBA,QAASpC,EAC/B,EAD+BA,aAGlC,OADAT,QAAQC,IAAIiD,GAER,qBAAKlE,UAAU,gBAAf,SACIkE,EAAUf,OAAS,GAAKe,EAAUhD,KAAK,SAAEc,EAAMZ,GAAR,OACvC,cAAC,EAAD,CAAuBiB,SAAWL,EAEXG,WAAaA,EACb0B,QAAUA,EACVpC,aAAeA,GAHTO,EAAK5B,UCiB7B+D,EAxBmB,SAAC,GAA2C,IACxEC,EADgCC,EAAuC,EAAvCA,WAAYd,EAA2B,EAA3BA,QAASpB,EAAkB,EAAlBA,WAEnDqB,EAASE,EAAgBH,EAASpB,GAEjCkC,GAAcb,EAAOL,OAAS,IAEjCiB,EADUZ,EAAO,GACN3D,MAQf,OACI,mBAAGG,UAAS,gBAAWqE,EAAa,GAAK,mBACtCC,QARa,SAAE7D,GACd4D,GACJ5D,EAAE8D,kBAOCH,KAAOA,EACPI,MAAK,UAAKH,EAAa,GAAK,YAH/B,4BCZFI,EAAeC,EAAQ,IAwDZC,MAtDf,WAAgB,IAAD,EACmBC,mBAAU,IAD7B,mBACLrB,EADK,KACIsB,EADJ,OAEuBD,mBAAU,IAFjC,mBAELV,EAFK,KAEMY,EAFN,OAGuBF,mBAAU,IAHjC,mBAGNzC,EAHM,KAGM4C,EAHN,OAIiCH,mBAAU,IAJ3C,mBAINI,EAJM,KAIWC,EAJX,OAKqBL,oBAAU,GAL/B,mBAKNP,EALM,KAKMa,EALN,KAePC,EAAQ,SAAEC,EAAgBC,GAC9B,IAAMC,EAAc5B,EAAgB0B,EAAgBC,GAO9CE,EJuBmB,SAAErB,EAAW/B,GACxC,OAAO+B,EAAUrB,OAAO,SAAA2C,GAAC,OAAIA,EAAEpF,MAAM+B,KIxBlBsD,CAAeH,EAAaD,GAC7CJ,EAAoBK,GACpBP,EAAeM,GACfH,EAAaK,IAaf,OAJAG,qBAAW,WA5BQ,IAAEzC,KA6BPwB,KA3BVK,EAAc7B,EAAIiB,WAAa,IAC/BW,EAAY5B,EAAIM,SAAW,IAC3B4B,EAAOlC,EAAIiB,WAAa,GAAI,OA0B7B,IAGD,qBAAKlE,UAAU,MAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,cAAC,EAAD,CAA2BkE,UAAYc,EACZ7C,WAAaA,EACbV,aAfb,SAAEY,EAAUlB,GAC9B,IAAIwE,EAAiBC,OAAOC,OAAQ,GAAI1D,GACxCwD,EAAgBtD,GAAalB,EAC7BgE,EAAOjB,EAAWyB,MAad,cAAC,EAAD,CAA2BtB,WAAaA,EACbd,QAAUA,EACVpB,WAAaA,UClDhD2D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b6abcc95.chunk.js","sourcesContent":["const QuestionnaireContentBlock = ( { contentBlock  } ) => {\n  return (\n  \t<div dangerouslySetInnerHTML={{__html: contentBlock.text }}></div>\n  )\n}\n\nexport default QuestionnaireContentBlock;","const Radio = ( props ) => {\n    const onChange = e => {\n      props.onChange( props.value );\n    };\n    return (\n      <div className={`m-form-field m-form-field__radio m-form-field__lg-target\n                       ${ props.containerClass ? props.containerClass : '' }`}>\n        <input className=\"a-radio\"\n               type=\"radio\"\n               value={ props.value }\n               id={ props.id }\n               name={ props.name }\n               checked={ props.checked }\n               disabled={ props.disabled }\n               onChange={ onChange }/>\n        <label className=\"a-label\"\n               htmlFor={ props.id }>\n          <span dangerouslySetInnerHTML={{__html: props.label }}></span>\n        </label>\n      </div>\n    )\n}\n\nexport default Radio;","import Radio from './Radio.js';\n\nconst RadioGroup = ( { questionID, selection, answers, onChange } ) => {\n  console.log('radio group', selection)\n  return (\n    <fieldset className=\"o-form_fieldset\">\n      { answers.map( ( answer, index ) => (\n        <Radio label={ answer.text }\n               value={ answer.id }\n               checked={ selection === answer.id }\n               id={`q_${questionID}_a_${answer.id}`}\n               onChange={ onChange } \n               key={ answer.id }/>\n      ) ) }\n    </fieldset>\n  )\n}\n\nexport default RadioGroup;","const Checkbox = ( props ) => {\n    const onChange = e => {\n      props.onChange( props.value, e.target.checked );\n    };\n    \n    return (\n      <div className={`m-form-field m-form-field__checkbox m-form-field__lg-target\n                       ${ props.containerClass ? props.containerClass : '' }`}>\n        <input className=\"a-checkbox\"\n               type=\"checkbox\"\n               value={ props.value }\n               id={ props.id }\n               name={ props.name }\n               checked={ props.checked }\n               disabled={ props.disabled }\n               onChange={ onChange }/>\n        <label className=\"a-label\"\n               htmlFor={ props.id }>\n          <span dangerouslySetInnerHTML={{__html: props.label }}></span>\n        </label>\n      </div>\n    )\n}\n\nexport default Checkbox;","import Checkbox from './Checkbox.js';\n\nconst CheckboxGroup = ( { questionID, selection, answers, onChange } ) => {\n  const selected = selection || [];\n  const handleChange = ( val, isChecked ) => {\n    let copy = [...selected];\n    if ( isChecked ) {\n      !copy.includes( val ) && copy.push( val );\n    } else {\n      copy = copy.filter( item => item !== val );\n    }\n    onChange( copy );\n  };\n\n  return (\n    <fieldset className=\"o-form_fieldset\">\n      { answers.map( ( answer, index ) => (\n        <Checkbox label={ answer.text }\n                  value={ answer.id }\n                  checked={ selected.includes( answer.id ) }\n                  id={`q_${questionID}_a_${answer.id}`}\n                  onChange={ handleChange }\n                  key={ answer.id }/>\n      ) ) }\n    </fieldset>\n  )\n}\n\nexport default CheckboxGroup;","import { v4 as uuidv4 } from 'uuid';\n\nexport const conditionMet = ( condition, selections, show ) => {\n  let selection = selections[condition.question];\n  let type = condition.type;\n  let answer = condition.answer;\n  if ( type === 'exists' ) {\n    return selection !== undefined;\n  } else if ( condition.type === 'equals' ) {\n    return Array.isArray( selection ) ? \n           selection.includes( answer ) : \n           selection === answer;\n  } else if ( condition.type === 'not_equals' ) {\n    return Array.isArray( selection ) ? \n           !selection.includes( answer ) : \n           selection !== answer;\n  }\n}\n\nexport const checkConditionGroup = ( group, selections, show ) => {\n  let comparison_type = group.type;\n  let conditions = group.conditions;\n  if ( comparison_type === 'all' ) {\n    return conditions.every(\n      condition => conditionMet( condition, selections ) === true\n    );\n  } else if ( comparison_type === 'any' ) {\n    conditions.forEach(\n      condition => console.log(conditionMet( condition, selections, show ))\n    )\n    return conditions.some(\n      condition => conditionMet( condition, selections ) === true\n    );\n  }\n}\n\nexport const checkConditions = ( condition_block, selections ) => {\n  const conditionsPassed = checkConditionGroup( \n  \tcondition_block, selections \n  );\n  let groups = condition_block.condition_groups;\n  if ( groups && groups.length > 0 ) {\n    let results = [];\n    groups.forEach( group => {\n      results.push(checkConditionGroup( group, selections ))\n    })\n  \treturn condition_block.type === 'any' ?\n  \t results.some( result => result === true ) :\n     results.every( result => result === true );\t   \n  } else {\n  \treturn conditionsPassed;\n  }\n}\n\nexport const checkFinished = ( questions, selections ) => {\n  return questions.every( q => q.id in selections );\n}\n\nexport const displayConditionsMet = ( obj, selections ) => {\n  let condition_block = obj.condition_block || {};\n  if ( !condition_block || \n       !condition_block.conditions || \n       !condition_block.conditions.length ) {\n    return true;\n  }\n  return checkConditions( condition_block, selections );\n}\n\nexport const getDisplayable = ( arr, selections ) => {\n  return arr.filter(\n    ( item ) => {\n      return displayConditionsMet( item, selections )\n    }\n  );\n}\n\nexport const getItemById = ( arr, id ) => {\n  return arr.find( (item)  => item.id === id);\n}\n\nexport const generateId = () => {\n  return uuidv4();\n}\n","import QuestionnaireContentBlock from './QuestionnaireContentBlock.js';\nimport RadioGroup from '../FormElements/RadioGroup.js';\nimport CheckboxGroup from '../FormElements/CheckboxGroup.js';\nimport { getDisplayable } from '../utils.js';\n\nconst QuestionnaireQuestion = ( { \n  question, selections, content, handleChange \n} ) => {\n  const answers = getDisplayable( question.answers, selections );\n  const contentBlocks = getDisplayable( question.content_blocks, selections );\n  const id = question.id;\n  const FormComponent = question.type === 'radio' ?\n                        RadioGroup : \n                        CheckboxGroup;\n  console.log('questionnaire question', id, selections, selections[id])\n  return (\n    <div className=\"question-item block\">\n      { contentBlocks.length > 0 && contentBlocks.map( ( item, index ) => (\n        <QuestionnaireContentBlock key={ item.id } \n                                   contentBlock={ item }/>\n      ) ) } \n      <FormComponent questionID={ id }\n                     selection={ selections[id] }\n                     answers={ answers }\n                     onChange={ ( val ) => handleChange( id, val ) }/>\n    </div>\n  )\n}\n\nexport default QuestionnaireQuestion;","import QuestionnaireQuestion from './QuestionnaireQuestion.js';\n\nconst QuestionnaireQuestionList = ( \n  { questions, selections, content, handleChange } \n) => {\n  console.log(questions)\n  return (\n      <div className=\"question-list\">\n        { questions.length > 0 && questions.map( ( item, index ) => (\n          <QuestionnaireQuestion question={ item } \n                                 key={ item.id }\n                                 selections={ selections }\n                                 content={ content }\n                                 handleChange={ handleChange } />\n        ) ) } \n      </div>\n  )\n}\n\nexport default QuestionnaireQuestionList;","import { getDisplayable } from '../utils.js';\n\n\nconst QuestionnaireSubmitButton = ( { isFinished, results, selections } ) => {\n  let href;\n  const result = getDisplayable( results, selections );\n    // console.log(result)\n    if ( isFinished && result.length > 0 ) {\n      let res = result[0];\n      href = res.text;\n    }\n  const handleClick = ( e ) => {\n    if ( !isFinished ) {\n      e.preventDefault();\n    }\n  }\n\n  return (\n      <a className={`a-btn ${isFinished ? '' : 'a-btn__disabled'}`} \n         onClick={ handleClick }\n         href={ href }\n         title={`${isFinished ? '' : 'disabled'}`}>\n        Go to results\n      </a>\n  )\n}\n\nexport default QuestionnaireSubmitButton;","import './App.css';\nimport { useEffect, useState } from 'react';\nimport QuestionnaireQuestionList from './Questionnaire/QuestionnaireQuestionList.js';\nimport QuestionnaireSubmitButton from './Questionnaire/QuestionnaireSubmitButton.js';\n\nimport { checkFinished, getDisplayable } from './utils.js';\nvar initial_json = require('./test.json');\n\nfunction App() {\n  const [ results, setResults ] = useState( [] );\n  const [ questions, setQuestions ] = useState( [] );\n  const [selections, setSelections] = useState( {} );\n  const [activeQuestions, setActiveQuestions] = useState( [] );\n  const [isFinished, setFinished] = useState( false );\n\n  const resetState = ( obj ) => {\n    if ( obj ) {\n      setQuestions( obj.questions || [] );\n      setResults( obj.results || [] );\n      setup( obj.questions || [], [] );\n    }\n  }\n\n  const setup = ( questionsArray, selectionsObj ) => {\n    const displayable = getDisplayable( questionsArray, selectionsObj );\n    // let ids = displayable.map( item => item.id );\n    // let leftovers = Object.keys( selectionsObj ).filter( x => !ids.includes( +x ) );\n    // handle checkbox array items that are no longer visible?\n    // let copy = Object.assign( {}, selectionsObj );\n    // leftovers.forEach( id => delete copy[id] ); \n    // let required = displayable.filter( q => q.required );\n    const finished = checkFinished( displayable, selectionsObj );\n    setActiveQuestions( displayable );\n    setSelections( selectionsObj );\n    setFinished( finished );\n  }\n\n  const updateState = ( question, answer ) => {\n    let selectionsCopy = Object.assign( {}, selections );\n    selectionsCopy[ question ] = answer;\n    setup( questions, selectionsCopy );\n  }\n\n  useEffect( () => {\n    resetState( initial_json )\n  }, []);\n  \n  return (\n    <div className=\"App\">\n      <div className=\"Questionnaire block\">\n        <QuestionnaireQuestionList questions={ activeQuestions } \n                                   selections={ selections }\n                                   handleChange={ updateState }/>\n        <QuestionnaireSubmitButton isFinished={ isFinished }\n                                   results={ results } \n                                   selections={ selections }/>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}